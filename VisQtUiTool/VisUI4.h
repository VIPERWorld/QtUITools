/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the tools applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or (at your option) the GNU General
** Public license version 3 or any later version approved by the KDE Free
** Qt Foundation. The licenses are as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-2.0.html and
** https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

//
//  W A R N I N G
//  -------------
//
// This file is not part of the Qt API.  It exists for the convenience
// of Qt Designer.  This header
// file may change from version to version without notice, or even be removed.
//
// We mean it.
//

// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT!

#ifndef VISQTUITOOL_H
#define VISQTUITOOL_H

#include <qlist.h>
#include <qstring.h>
#include <qstringlist.h>
#include <qxmlstream.h>
#include <qglobal.h>

class VisDomUI;
class VisDomIncludes;
class VisDomInclude;
class VisDomResources;
class VisDomResource;
class VisDomActionGroup;
class VisDomAction;
class VisDomActionRef;
class VisDomButtonGroup;
class VisDomButtonGroups;
class VisDomImages;
class VisDomImage;
class VisDomImageData;
class VisDomCustomWidgets;
class VisDomHeader;
class VisDomCustomWidget;
class VisDomProperties;
class VisDomPropertyData;
class VisDomSizePolicyData;
class VisDomLayoutDefault;
class VisDomLayoutFunction;
class VisDomTabStops;
class VisDomLayout;
class VisDomLayoutItem;
class VisDomRow;
class VisDomColumn;
class VisDomItem;
class VisDomWidget;
class VisDomSpacer;
class VisDomColor;
class VisDomGradientStop;
class VisDomGradient;
class VisDomBrush;
class VisDomColorRole;
class VisDomColorGroup;
class VisDomPalette;
class VisDomFont;
class VisDomPoint;
class VisDomRect;
class VisDomLocale;
class VisDomSizePolicy;
class VisDomSize;
class VisDomDate;
class VisDomTime;
class VisDomDateTime;
class VisDomStringList;
class VisDomResourcePixmap;
class VisDomResourceIcon;
class VisDomString;
class VisDomPointF;
class VisDomRectF;
class VisDomSizeF;
class VisDomChar;
class VisDomUrl;
class VisDomProperty;
class VisDomConnections;
class VisDomConnection;
class VisDomConnectionHints;
class VisDomConnectionHint;
class VisDomScript;
class VisDomWidgetData;
class VisDomDesignerData;
class VisDomSlots;
class VisDomPropertySpecifications;
class VisDomPropertyToolTip;
class VisDomStringPropertySpecification;

#include "visqtuitool_global.h"



class VISQTUITOOL_EXPORT VisDomUI {
	Q_DISABLE_COPY(VisDomUI)
public:
	VisDomUI();
	~VisDomUI();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeVersion() const { return m_has_attr_version; }
	inline QString attributeVersion() const { return m_attr_version; }
	inline void setAttributeVersion(const QString& a) { m_attr_version = a; m_has_attr_version = true; }
	inline void clearAttributeVersion() { m_has_attr_version = false; }

	inline bool hasAttributeLanguage() const { return m_has_attr_language; }
	inline QString attributeLanguage() const { return m_attr_language; }
	inline void setAttributeLanguage(const QString& a) { m_attr_language = a; m_has_attr_language = true; }
	inline void clearAttributeLanguage() { m_has_attr_language = false; }

	inline bool hasAttributeDisplayname() const { return m_has_attr_displayname; }
	inline QString attributeDisplayname() const { return m_attr_displayname; }
	inline void setAttributeDisplayname(const QString& a) { m_attr_displayname = a; m_has_attr_displayname = true; }
	inline void clearAttributeDisplayname() { m_has_attr_displayname = false; }

	inline bool hasAttributeStdsetdef() const { return m_has_attr_stdsetdef; }
	inline int attributeStdsetdef() const { return m_attr_stdsetdef; }
	inline void setAttributeStdsetdef(int a) { m_attr_stdsetdef = a; m_has_attr_stdsetdef = true; }
	inline void clearAttributeStdsetdef() { m_has_attr_stdsetdef = false; }

	inline bool hasAttributeStdSetDef() const { return m_has_attr_stdSetDef; }
	inline int attributeStdSetDef() const { return m_attr_stdSetDef; }
	inline void setAttributeStdSetDef(int a) { m_attr_stdSetDef = a; m_has_attr_stdSetDef = true; }
	inline void clearAttributeStdSetDef() { m_has_attr_stdSetDef = false; }

	// child element accessors
	inline QString elementAuthor() const { return m_author; }
	void setElementAuthor(const QString& a);
	inline bool hasElementAuthor() const { return m_children & Author; }
	void clearElementAuthor();

	inline QString elementComment() const { return m_comment; }
	void setElementComment(const QString& a);
	inline bool hasElementComment() const { return m_children & Comment; }
	void clearElementComment();

	inline QString elementExportMacro() const { return m_exportMacro; }
	void setElementExportMacro(const QString& a);
	inline bool hasElementExportMacro() const { return m_children & ExportMacro; }
	void clearElementExportMacro();

	inline QString elementClass() const { return m_class; }
	void setElementClass(const QString& a);
	inline bool hasElementClass() const { return m_children & Class; }
	void clearElementClass();

	inline VisDomWidget* elementWidget() const { return m_widget; }
	VisDomWidget* takeElementWidget();
	void setElementWidget(VisDomWidget* a);
	inline bool hasElementWidget() const { return m_children & Widget; }
	void clearElementWidget();

	inline VisDomLayoutDefault* elementLayoutDefault() const { return m_layoutDefault; }
	VisDomLayoutDefault* takeElementLayoutDefault();
	void setElementLayoutDefault(VisDomLayoutDefault* a);
	inline bool hasElementLayoutDefault() const { return m_children & LayoutDefault; }
	void clearElementLayoutDefault();

	inline VisDomLayoutFunction* elementLayoutFunction() const { return m_layoutFunction; }
	VisDomLayoutFunction* takeElementLayoutFunction();
	void setElementLayoutFunction(VisDomLayoutFunction* a);
	inline bool hasElementLayoutFunction() const { return m_children & LayoutFunction; }
	void clearElementLayoutFunction();

	inline QString elementPixmapFunction() const { return m_pixmapFunction; }
	void setElementPixmapFunction(const QString& a);
	inline bool hasElementPixmapFunction() const { return m_children & PixmapFunction; }
	void clearElementPixmapFunction();

	inline VisDomCustomWidgets* elementCustomWidgets() const { return m_customWidgets; }
	VisDomCustomWidgets* takeElementCustomWidgets();
	void setElementCustomWidgets(VisDomCustomWidgets* a);
	inline bool hasElementCustomWidgets() const { return m_children & CustomWidgets; }
	void clearElementCustomWidgets();

	inline VisDomTabStops* elementTabStops() const { return m_tabStops; }
	VisDomTabStops* takeElementTabStops();
	void setElementTabStops(VisDomTabStops* a);
	inline bool hasElementTabStops() const { return m_children & TabStops; }
	void clearElementTabStops();

	inline VisDomImages* elementImages() const { return m_images; }
	VisDomImages* takeElementImages();
	void setElementImages(VisDomImages* a);
	inline bool hasElementImages() const { return m_children & Images; }
	void clearElementImages();

	inline VisDomIncludes* elementIncludes() const { return m_includes; }
	VisDomIncludes* takeElementIncludes();
	void setElementIncludes(VisDomIncludes* a);
	inline bool hasElementIncludes() const { return m_children & Includes; }
	void clearElementIncludes();

	inline VisDomResources* elementResources() const { return m_resources; }
	VisDomResources* takeElementResources();
	void setElementResources(VisDomResources* a);
	inline bool hasElementResources() const { return m_children & Resources; }
	void clearElementResources();

	inline VisDomConnections* elementConnections() const { return m_connections; }
	VisDomConnections* takeElementConnections();
	void setElementConnections(VisDomConnections* a);
	inline bool hasElementConnections() const { return m_children & Connections; }
	void clearElementConnections();

	inline VisDomDesignerData* elementDesignerdata() const { return m_designerdata; }
	VisDomDesignerData* takeElementDesignerdata();
	void setElementDesignerdata(VisDomDesignerData* a);
	inline bool hasElementDesignerdata() const { return m_children & Designerdata; }
	void clearElementDesignerdata();

	inline VisDomSlots* elementSlots() const { return m_slots; }
	VisDomSlots* takeElementSlots();
	void setElementSlots(VisDomSlots* a);
	inline bool hasElementSlots() const { return m_children & Slots; }
	void clearElementSlots();

	inline VisDomButtonGroups* elementButtonGroups() const { return m_buttonGroups; }
	VisDomButtonGroups* takeElementButtonGroups();
	void setElementButtonGroups(VisDomButtonGroups* a);
	inline bool hasElementButtonGroups() const { return m_children & ButtonGroups; }
	void clearElementButtonGroups();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_version;
	bool m_has_attr_version;

	QString m_attr_language;
	bool m_has_attr_language;

	QString m_attr_displayname;
	bool m_has_attr_displayname;

	int m_attr_stdsetdef;
	bool m_has_attr_stdsetdef;

	int m_attr_stdSetDef;
	bool m_has_attr_stdSetDef;

	// child element data
	uint m_children;
	QString m_author;
	QString m_comment;
	QString m_exportMacro;
	QString m_class;
	VisDomWidget* m_widget;
	VisDomLayoutDefault* m_layoutDefault;
	VisDomLayoutFunction* m_layoutFunction;
	QString m_pixmapFunction;
	VisDomCustomWidgets* m_customWidgets;
	VisDomTabStops* m_tabStops;
	VisDomImages* m_images;
	VisDomIncludes* m_includes;
	VisDomResources* m_resources;
	VisDomConnections* m_connections;
	VisDomDesignerData* m_designerdata;
	VisDomSlots* m_slots;
	VisDomButtonGroups* m_buttonGroups;
	enum Child {
		Author = 1,
		Comment = 2,
		ExportMacro = 4,
		Class = 8,
		Widget = 16,
		LayoutDefault = 32,
		LayoutFunction = 64,
		PixmapFunction = 128,
		CustomWidgets = 256,
		TabStops = 512,
		Images = 1024,
		Includes = 2048,
		Resources = 4096,
		Connections = 8192,
		Designerdata = 16384,
		Slots = 32768,
		ButtonGroups = 65536
	};
};

class VISQTUITOOL_EXPORT VisDomIncludes {
	Q_DISABLE_COPY(VisDomIncludes)
public:
	VisDomIncludes();
	~VisDomIncludes();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline QList<VisDomInclude*> elementInclude() const { return m_include; }
	void setElementInclude(const QList<VisDomInclude*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	QList<VisDomInclude*> m_include;
	enum Child {
		Include = 1
	};
};

class VISQTUITOOL_EXPORT VisDomInclude {
	Q_DISABLE_COPY(VisDomInclude)
public:
	VisDomInclude();
	~VisDomInclude();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeLocation() const { return m_has_attr_location; }
	inline QString attributeLocation() const { return m_attr_location; }
	inline void setAttributeLocation(const QString& a) { m_attr_location = a; m_has_attr_location = true; }
	inline void clearAttributeLocation() { m_has_attr_location = false; }

	inline bool hasAttributeImpldecl() const { return m_has_attr_impldecl; }
	inline QString attributeImpldecl() const { return m_attr_impldecl; }
	inline void setAttributeImpldecl(const QString& a) { m_attr_impldecl = a; m_has_attr_impldecl = true; }
	inline void clearAttributeImpldecl() { m_has_attr_impldecl = false; }

	// child element accessors
private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_location;
	bool m_has_attr_location;

	QString m_attr_impldecl;
	bool m_has_attr_impldecl;

	// child element data
	uint m_children;
};

class VISQTUITOOL_EXPORT VisDomResources {
	Q_DISABLE_COPY(VisDomResources)
public:
	VisDomResources();
	~VisDomResources();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeName() const { return m_has_attr_name; }
	inline QString attributeName() const { return m_attr_name; }
	inline void setAttributeName(const QString& a) { m_attr_name = a; m_has_attr_name = true; }
	inline void clearAttributeName() { m_has_attr_name = false; }

	// child element accessors
	inline QList<VisDomResource*> elementInclude() const { return m_include; }
	void setElementInclude(const QList<VisDomResource*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_name;
	bool m_has_attr_name;

	// child element data
	uint m_children;
	QList<VisDomResource*> m_include;
	enum Child {
		Include = 1
	};
};

class VISQTUITOOL_EXPORT VisDomResource {
	Q_DISABLE_COPY(VisDomResource)
public:
	VisDomResource();
	~VisDomResource();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeLocation() const { return m_has_attr_location; }
	inline QString attributeLocation() const { return m_attr_location; }
	inline void setAttributeLocation(const QString& a) { m_attr_location = a; m_has_attr_location = true; }
	inline void clearAttributeLocation() { m_has_attr_location = false; }

	// child element accessors
private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_location;
	bool m_has_attr_location;

	// child element data
	uint m_children;
};

class VISQTUITOOL_EXPORT VisDomActionGroup {
	Q_DISABLE_COPY(VisDomActionGroup)
public:
	VisDomActionGroup();
	~VisDomActionGroup();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeName() const { return m_has_attr_name; }
	inline QString attributeName() const { return m_attr_name; }
	inline void setAttributeName(const QString& a) { m_attr_name = a; m_has_attr_name = true; }
	inline void clearAttributeName() { m_has_attr_name = false; }

	// child element accessors
	inline QList<VisDomAction*> elementAction() const { return m_action; }
	void setElementAction(const QList<VisDomAction*>& a);

	inline QList<VisDomActionGroup*> elementActionGroup() const { return m_actionGroup; }
	void setElementActionGroup(const QList<VisDomActionGroup*>& a);

	inline QList<VisDomProperty*> elementProperty() const { return m_property; }
	void setElementProperty(const QList<VisDomProperty*>& a);

	inline QList<VisDomProperty*> elementAttribute() const { return m_attribute; }
	void setElementAttribute(const QList<VisDomProperty*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_name;
	bool m_has_attr_name;

	// child element data
	uint m_children;
	QList<VisDomAction*> m_action;
	QList<VisDomActionGroup*> m_actionGroup;
	QList<VisDomProperty*> m_property;
	QList<VisDomProperty*> m_attribute;
	enum Child {
		Action = 1,
		ActionGroup = 2,
		Property = 4,
		Attribute = 8
	};
};

class VISQTUITOOL_EXPORT VisDomAction {
	Q_DISABLE_COPY(VisDomAction)
public:
	VisDomAction();
	~VisDomAction();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeName() const { return m_has_attr_name; }
	inline QString attributeName() const { return m_attr_name; }
	inline void setAttributeName(const QString& a) { m_attr_name = a; m_has_attr_name = true; }
	inline void clearAttributeName() { m_has_attr_name = false; }

	inline bool hasAttributeMenu() const { return m_has_attr_menu; }
	inline QString attributeMenu() const { return m_attr_menu; }
	inline void setAttributeMenu(const QString& a) { m_attr_menu = a; m_has_attr_menu = true; }
	inline void clearAttributeMenu() { m_has_attr_menu = false; }

	// child element accessors
	inline QList<VisDomProperty*> elementProperty() const { return m_property; }
	void setElementProperty(const QList<VisDomProperty*>& a);

	inline QList<VisDomProperty*> elementAttribute() const { return m_attribute; }
	void setElementAttribute(const QList<VisDomProperty*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_name;
	bool m_has_attr_name;

	QString m_attr_menu;
	bool m_has_attr_menu;

	// child element data
	uint m_children;
	QList<VisDomProperty*> m_property;
	QList<VisDomProperty*> m_attribute;
	enum Child {
		Property = 1,
		Attribute = 2
	};
};

class VISQTUITOOL_EXPORT VisDomActionRef {
	Q_DISABLE_COPY(VisDomActionRef)
public:
	VisDomActionRef();
	~VisDomActionRef();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeName() const { return m_has_attr_name; }
	inline QString attributeName() const { return m_attr_name; }
	inline void setAttributeName(const QString& a) { m_attr_name = a; m_has_attr_name = true; }
	inline void clearAttributeName() { m_has_attr_name = false; }

	// child element accessors
private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_name;
	bool m_has_attr_name;

	// child element data
	uint m_children;
};

class VISQTUITOOL_EXPORT VisDomButtonGroup {
	Q_DISABLE_COPY(VisDomButtonGroup)
public:
	VisDomButtonGroup();
	~VisDomButtonGroup();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeName() const { return m_has_attr_name; }
	inline QString attributeName() const { return m_attr_name; }
	inline void setAttributeName(const QString& a) { m_attr_name = a; m_has_attr_name = true; }
	inline void clearAttributeName() { m_has_attr_name = false; }

	// child element accessors
	inline QList<VisDomProperty*> elementProperty() const { return m_property; }
	void setElementProperty(const QList<VisDomProperty*>& a);

	inline QList<VisDomProperty*> elementAttribute() const { return m_attribute; }
	void setElementAttribute(const QList<VisDomProperty*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_name;
	bool m_has_attr_name;

	// child element data
	uint m_children;
	QList<VisDomProperty*> m_property;
	QList<VisDomProperty*> m_attribute;
	enum Child {
		Property = 1,
		Attribute = 2
	};
};

class VISQTUITOOL_EXPORT VisDomButtonGroups {
	Q_DISABLE_COPY(VisDomButtonGroups)
public:
	VisDomButtonGroups();
	~VisDomButtonGroups();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline QList<VisDomButtonGroup*> elementButtonGroup() const { return m_buttonGroup; }
	void setElementButtonGroup(const QList<VisDomButtonGroup*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	QList<VisDomButtonGroup*> m_buttonGroup;
	enum Child {
		ButtonGroup = 1
	};
};

class VISQTUITOOL_EXPORT VisDomImages {
	Q_DISABLE_COPY(VisDomImages)
public:
	VisDomImages();
	~VisDomImages();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline QList<VisDomImage*> elementImage() const { return m_image; }
	void setElementImage(const QList<VisDomImage*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	QList<VisDomImage*> m_image;
	enum Child {
		Image = 1
	};
};

class VISQTUITOOL_EXPORT VisDomImage {
	Q_DISABLE_COPY(VisDomImage)
public:
	VisDomImage();
	~VisDomImage();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeName() const { return m_has_attr_name; }
	inline QString attributeName() const { return m_attr_name; }
	inline void setAttributeName(const QString& a) { m_attr_name = a; m_has_attr_name = true; }
	inline void clearAttributeName() { m_has_attr_name = false; }

	// child element accessors
	inline VisDomImageData* elementData() const { return m_data; }
	VisDomImageData* takeElementData();
	void setElementData(VisDomImageData* a);
	inline bool hasElementData() const { return m_children & Data; }
	void clearElementData();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_name;
	bool m_has_attr_name;

	// child element data
	uint m_children;
	VisDomImageData* m_data;
	enum Child {
		Data = 1
	};
};

class VISQTUITOOL_EXPORT VisDomImageData {
	Q_DISABLE_COPY(VisDomImageData)
public:
	VisDomImageData();
	~VisDomImageData();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeFormat() const { return m_has_attr_format; }
	inline QString attributeFormat() const { return m_attr_format; }
	inline void setAttributeFormat(const QString& a) { m_attr_format = a; m_has_attr_format = true; }
	inline void clearAttributeFormat() { m_has_attr_format = false; }

	inline bool hasAttributeLength() const { return m_has_attr_length; }
	inline int attributeLength() const { return m_attr_length; }
	inline void setAttributeLength(int a) { m_attr_length = a; m_has_attr_length = true; }
	inline void clearAttributeLength() { m_has_attr_length = false; }

	// child element accessors
private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_format;
	bool m_has_attr_format;

	int m_attr_length;
	bool m_has_attr_length;

	// child element data
	uint m_children;
};

class VISQTUITOOL_EXPORT VisDomCustomWidgets {
	Q_DISABLE_COPY(VisDomCustomWidgets)
public:
	VisDomCustomWidgets();
	~VisDomCustomWidgets();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline QList<VisDomCustomWidget*> elementCustomWidget() const { return m_customWidget; }
	void setElementCustomWidget(const QList<VisDomCustomWidget*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	QList<VisDomCustomWidget*> m_customWidget;
	enum Child {
		CustomWidget = 1
	};
};

class VISQTUITOOL_EXPORT VisDomHeader {
	Q_DISABLE_COPY(VisDomHeader)
public:
	VisDomHeader();
	~VisDomHeader();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeLocation() const { return m_has_attr_location; }
	inline QString attributeLocation() const { return m_attr_location; }
	inline void setAttributeLocation(const QString& a) { m_attr_location = a; m_has_attr_location = true; }
	inline void clearAttributeLocation() { m_has_attr_location = false; }

	// child element accessors
private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_location;
	bool m_has_attr_location;

	// child element data
	uint m_children;
};

class VISQTUITOOL_EXPORT VisDomCustomWidget {
	Q_DISABLE_COPY(VisDomCustomWidget)
public:
	VisDomCustomWidget();
	~VisDomCustomWidget();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline QString elementClass() const { return m_class; }
	void setElementClass(const QString& a);
	inline bool hasElementClass() const { return m_children & Class; }
	void clearElementClass();

	inline QString elementExtends() const { return m_extends; }
	void setElementExtends(const QString& a);
	inline bool hasElementExtends() const { return m_children & Extends; }
	void clearElementExtends();

	inline VisDomHeader* elementHeader() const { return m_header; }
	VisDomHeader* takeElementHeader();
	void setElementHeader(VisDomHeader* a);
	inline bool hasElementHeader() const { return m_children & Header; }
	void clearElementHeader();

	inline VisDomSize* elementSizeHint() const { return m_sizeHint; }
	VisDomSize* takeElementSizeHint();
	void setElementSizeHint(VisDomSize* a);
	inline bool hasElementSizeHint() const { return m_children & SizeHint; }
	void clearElementSizeHint();

	inline QString elementAddPageMethod() const { return m_addPageMethod; }
	void setElementAddPageMethod(const QString& a);
	inline bool hasElementAddPageMethod() const { return m_children & AddPageMethod; }
	void clearElementAddPageMethod();

	inline int elementContainer() const { return m_container; }
	void setElementContainer(int a);
	inline bool hasElementContainer() const { return m_children & Container; }
	void clearElementContainer();

	inline VisDomSizePolicyData* elementSizePolicy() const { return m_sizePolicy; }
	VisDomSizePolicyData* takeElementSizePolicy();
	void setElementSizePolicy(VisDomSizePolicyData* a);
	inline bool hasElementSizePolicy() const { return m_children & SizePolicy; }
	void clearElementSizePolicy();

	inline QString elementPixmap() const { return m_pixmap; }
	void setElementPixmap(const QString& a);
	inline bool hasElementPixmap() const { return m_children & Pixmap; }
	void clearElementPixmap();

	inline VisDomScript* elementScript() const { return m_script; }
	VisDomScript* takeElementScript();
	void setElementScript(VisDomScript* a);
	inline bool hasElementScript() const { return m_children & Script; }
	void clearElementScript();

	inline VisDomProperties* elementProperties() const { return m_properties; }
	VisDomProperties* takeElementProperties();
	void setElementProperties(VisDomProperties* a);
	inline bool hasElementProperties() const { return m_children & Properties; }
	void clearElementProperties();

	inline VisDomSlots* elementSlots() const { return m_slots; }
	VisDomSlots* takeElementSlots();
	void setElementSlots(VisDomSlots* a);
	inline bool hasElementSlots() const { return m_children & Slots; }
	void clearElementSlots();

	inline VisDomPropertySpecifications* elementPropertyspecifications() const { return m_propertyspecifications; }
	VisDomPropertySpecifications* takeElementPropertyspecifications();
	void setElementPropertyspecifications(VisDomPropertySpecifications* a);
	inline bool hasElementPropertyspecifications() const { return m_children & Propertyspecifications; }
	void clearElementPropertyspecifications();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	QString m_class;
	QString m_extends;
	VisDomHeader* m_header;
	VisDomSize* m_sizeHint;
	QString m_addPageMethod;
	int m_container;
	VisDomSizePolicyData* m_sizePolicy;
	QString m_pixmap;
	VisDomScript* m_script;
	VisDomProperties* m_properties;
	VisDomSlots* m_slots;
	VisDomPropertySpecifications* m_propertyspecifications;
	enum Child {
		Class = 1,
		Extends = 2,
		Header = 4,
		SizeHint = 8,
		AddPageMethod = 16,
		Container = 32,
		SizePolicy = 64,
		Pixmap = 128,
		Script = 256,
		Properties = 512,
		Slots = 1024,
		Propertyspecifications = 2048
	};
};

class VISQTUITOOL_EXPORT VisDomProperties {
	Q_DISABLE_COPY(VisDomProperties)
public:
	VisDomProperties();
	~VisDomProperties();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline QList<VisDomPropertyData*> elementProperty() const { return m_property; }
	void setElementProperty(const QList<VisDomPropertyData*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	QList<VisDomPropertyData*> m_property;
	enum Child {
		Property = 1
	};
};

class VISQTUITOOL_EXPORT VisDomPropertyData {
	Q_DISABLE_COPY(VisDomPropertyData)
public:
	VisDomPropertyData();
	~VisDomPropertyData();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeType() const { return m_has_attr_type; }
	inline QString attributeType() const { return m_attr_type; }
	inline void setAttributeType(const QString& a) { m_attr_type = a; m_has_attr_type = true; }
	inline void clearAttributeType() { m_has_attr_type = false; }

	// child element accessors
private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_type;
	bool m_has_attr_type;

	// child element data
	uint m_children;
};

class VISQTUITOOL_EXPORT VisDomSizePolicyData {
	Q_DISABLE_COPY(VisDomSizePolicyData)
public:
	VisDomSizePolicyData();
	~VisDomSizePolicyData();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline int elementHorData() const { return m_horData; }
	void setElementHorData(int a);
	inline bool hasElementHorData() const { return m_children & HorData; }
	void clearElementHorData();

	inline int elementVerData() const { return m_verData; }
	void setElementVerData(int a);
	inline bool hasElementVerData() const { return m_children & VerData; }
	void clearElementVerData();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	int m_horData;
	int m_verData;
	enum Child {
		HorData = 1,
		VerData = 2
	};
};

class VISQTUITOOL_EXPORT VisDomLayoutDefault {
	Q_DISABLE_COPY(VisDomLayoutDefault)
public:
	VisDomLayoutDefault();
	~VisDomLayoutDefault();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeSpacing() const { return m_has_attr_spacing; }
	inline int attributeSpacing() const { return m_attr_spacing; }
	inline void setAttributeSpacing(int a) { m_attr_spacing = a; m_has_attr_spacing = true; }
	inline void clearAttributeSpacing() { m_has_attr_spacing = false; }

	inline bool hasAttributeMargin() const { return m_has_attr_margin; }
	inline int attributeMargin() const { return m_attr_margin; }
	inline void setAttributeMargin(int a) { m_attr_margin = a; m_has_attr_margin = true; }
	inline void clearAttributeMargin() { m_has_attr_margin = false; }

	// child element accessors
private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	int m_attr_spacing;
	bool m_has_attr_spacing;

	int m_attr_margin;
	bool m_has_attr_margin;

	// child element data
	uint m_children;
};

class VISQTUITOOL_EXPORT VisDomLayoutFunction {
	Q_DISABLE_COPY(VisDomLayoutFunction)
public:
	VisDomLayoutFunction();
	~VisDomLayoutFunction();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeSpacing() const { return m_has_attr_spacing; }
	inline QString attributeSpacing() const { return m_attr_spacing; }
	inline void setAttributeSpacing(const QString& a) { m_attr_spacing = a; m_has_attr_spacing = true; }
	inline void clearAttributeSpacing() { m_has_attr_spacing = false; }

	inline bool hasAttributeMargin() const { return m_has_attr_margin; }
	inline QString attributeMargin() const { return m_attr_margin; }
	inline void setAttributeMargin(const QString& a) { m_attr_margin = a; m_has_attr_margin = true; }
	inline void clearAttributeMargin() { m_has_attr_margin = false; }

	// child element accessors
private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_spacing;
	bool m_has_attr_spacing;

	QString m_attr_margin;
	bool m_has_attr_margin;

	// child element data
	uint m_children;
};

class VISQTUITOOL_EXPORT VisDomTabStops {
	Q_DISABLE_COPY(VisDomTabStops)
public:
	VisDomTabStops();
	~VisDomTabStops();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline QStringList elementTabStop() const { return m_tabStop; }
	void setElementTabStop(const QStringList& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	QStringList m_tabStop;
	enum Child {
		TabStop = 1
	};
};

class VISQTUITOOL_EXPORT VisDomLayout {
	Q_DISABLE_COPY(VisDomLayout)
public:
	VisDomLayout();
	~VisDomLayout();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeClass() const { return m_has_attr_class; }
	inline QString attributeClass() const { return m_attr_class; }
	inline void setAttributeClass(const QString& a) { m_attr_class = a; m_has_attr_class = true; }
	inline void clearAttributeClass() { m_has_attr_class = false; }

	inline bool hasAttributeName() const { return m_has_attr_name; }
	inline QString attributeName() const { return m_attr_name; }
	inline void setAttributeName(const QString& a) { m_attr_name = a; m_has_attr_name = true; }
	inline void clearAttributeName() { m_has_attr_name = false; }

	inline bool hasAttributeStretch() const { return m_has_attr_stretch; }
	inline QString attributeStretch() const { return m_attr_stretch; }
	inline void setAttributeStretch(const QString& a) { m_attr_stretch = a; m_has_attr_stretch = true; }
	inline void clearAttributeStretch() { m_has_attr_stretch = false; }

	inline bool hasAttributeRowStretch() const { return m_has_attr_rowStretch; }
	inline QString attributeRowStretch() const { return m_attr_rowStretch; }
	inline void setAttributeRowStretch(const QString& a) { m_attr_rowStretch = a; m_has_attr_rowStretch = true; }
	inline void clearAttributeRowStretch() { m_has_attr_rowStretch = false; }

	inline bool hasAttributeColumnStretch() const { return m_has_attr_columnStretch; }
	inline QString attributeColumnStretch() const { return m_attr_columnStretch; }
	inline void setAttributeColumnStretch(const QString& a) { m_attr_columnStretch = a; m_has_attr_columnStretch = true; }
	inline void clearAttributeColumnStretch() { m_has_attr_columnStretch = false; }

	inline bool hasAttributeRowMinimumHeight() const { return m_has_attr_rowMinimumHeight; }
	inline QString attributeRowMinimumHeight() const { return m_attr_rowMinimumHeight; }
	inline void setAttributeRowMinimumHeight(const QString& a) { m_attr_rowMinimumHeight = a; m_has_attr_rowMinimumHeight = true; }
	inline void clearAttributeRowMinimumHeight() { m_has_attr_rowMinimumHeight = false; }

	inline bool hasAttributeColumnMinimumWidth() const { return m_has_attr_columnMinimumWidth; }
	inline QString attributeColumnMinimumWidth() const { return m_attr_columnMinimumWidth; }
	inline void setAttributeColumnMinimumWidth(const QString& a) { m_attr_columnMinimumWidth = a; m_has_attr_columnMinimumWidth = true; }
	inline void clearAttributeColumnMinimumWidth() { m_has_attr_columnMinimumWidth = false; }

	// child element accessors
	inline QList<VisDomProperty*> elementProperty() const { return m_property; }
	void setElementProperty(const QList<VisDomProperty*>& a);

	inline QList<VisDomProperty*> elementAttribute() const { return m_attribute; }
	void setElementAttribute(const QList<VisDomProperty*>& a);

	inline QList<VisDomLayoutItem*> elementItem() const { return m_item; }
	void setElementItem(const QList<VisDomLayoutItem*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_class;
	bool m_has_attr_class;

	QString m_attr_name;
	bool m_has_attr_name;

	QString m_attr_stretch;
	bool m_has_attr_stretch;

	QString m_attr_rowStretch;
	bool m_has_attr_rowStretch;

	QString m_attr_columnStretch;
	bool m_has_attr_columnStretch;

	QString m_attr_rowMinimumHeight;
	bool m_has_attr_rowMinimumHeight;

	QString m_attr_columnMinimumWidth;
	bool m_has_attr_columnMinimumWidth;

	// child element data
	uint m_children;
	QList<VisDomProperty*> m_property;
	QList<VisDomProperty*> m_attribute;
	QList<VisDomLayoutItem*> m_item;
	enum Child {
		Property = 1,
		Attribute = 2,
		Item = 4
	};
};

class VISQTUITOOL_EXPORT VisDomLayoutItem {
	Q_DISABLE_COPY(VisDomLayoutItem)
public:
	VisDomLayoutItem();
	~VisDomLayoutItem();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeRow() const { return m_has_attr_row; }
	inline int attributeRow() const { return m_attr_row; }
	inline void setAttributeRow(int a) { m_attr_row = a; m_has_attr_row = true; }
	inline void clearAttributeRow() { m_has_attr_row = false; }

	inline bool hasAttributeColumn() const { return m_has_attr_column; }
	inline int attributeColumn() const { return m_attr_column; }
	inline void setAttributeColumn(int a) { m_attr_column = a; m_has_attr_column = true; }
	inline void clearAttributeColumn() { m_has_attr_column = false; }

	inline bool hasAttributeRowSpan() const { return m_has_attr_rowSpan; }
	inline int attributeRowSpan() const { return m_attr_rowSpan; }
	inline void setAttributeRowSpan(int a) { m_attr_rowSpan = a; m_has_attr_rowSpan = true; }
	inline void clearAttributeRowSpan() { m_has_attr_rowSpan = false; }

	inline bool hasAttributeColSpan() const { return m_has_attr_colSpan; }
	inline int attributeColSpan() const { return m_attr_colSpan; }
	inline void setAttributeColSpan(int a) { m_attr_colSpan = a; m_has_attr_colSpan = true; }
	inline void clearAttributeColSpan() { m_has_attr_colSpan = false; }

	inline bool hasAttributeAlignment() const { return m_has_attr_alignment; }
	inline QString attributeAlignment() const { return m_attr_alignment; }
	inline void setAttributeAlignment(const QString& a) { m_attr_alignment = a; m_has_attr_alignment = true; }
	inline void clearAttributeAlignment() { m_has_attr_alignment = false; }

	// child element accessors
	enum Kind { Unknown = 0, Widget, Layout, Spacer };
	inline Kind kind() const { return m_kind; }

	inline VisDomWidget* elementWidget() const { return m_widget; }
	VisDomWidget* takeElementWidget();
	void setElementWidget(VisDomWidget* a);

	inline VisDomLayout* elementLayout() const { return m_layout; }
	VisDomLayout* takeElementLayout();
	void setElementLayout(VisDomLayout* a);

	inline VisDomSpacer* elementSpacer() const { return m_spacer; }
	VisDomSpacer* takeElementSpacer();
	void setElementSpacer(VisDomSpacer* a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	int m_attr_row;
	bool m_has_attr_row;

	int m_attr_column;
	bool m_has_attr_column;

	int m_attr_rowSpan;
	bool m_has_attr_rowSpan;

	int m_attr_colSpan;
	bool m_has_attr_colSpan;

	QString m_attr_alignment;
	bool m_has_attr_alignment;

	// child element data
	Kind m_kind;
	VisDomWidget* m_widget;
	VisDomLayout* m_layout;
	VisDomSpacer* m_spacer;
};

class VISQTUITOOL_EXPORT VisDomRow {
	Q_DISABLE_COPY(VisDomRow)
public:
	VisDomRow();
	~VisDomRow();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline QList<VisDomProperty*> elementProperty() const { return m_property; }
	void setElementProperty(const QList<VisDomProperty*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	QList<VisDomProperty*> m_property;
	enum Child {
		Property = 1
	};
};

class VISQTUITOOL_EXPORT VisDomColumn {
	Q_DISABLE_COPY(VisDomColumn)
public:
	VisDomColumn();
	~VisDomColumn();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline QList<VisDomProperty*> elementProperty() const { return m_property; }
	void setElementProperty(const QList<VisDomProperty*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	QList<VisDomProperty*> m_property;
	enum Child {
		Property = 1
	};
};

class VISQTUITOOL_EXPORT VisDomItem {
	Q_DISABLE_COPY(VisDomItem)
public:
	VisDomItem();
	~VisDomItem();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeRow() const { return m_has_attr_row; }
	inline int attributeRow() const { return m_attr_row; }
	inline void setAttributeRow(int a) { m_attr_row = a; m_has_attr_row = true; }
	inline void clearAttributeRow() { m_has_attr_row = false; }

	inline bool hasAttributeColumn() const { return m_has_attr_column; }
	inline int attributeColumn() const { return m_attr_column; }
	inline void setAttributeColumn(int a) { m_attr_column = a; m_has_attr_column = true; }
	inline void clearAttributeColumn() { m_has_attr_column = false; }

	// child element accessors
	inline QList<VisDomProperty*> elementProperty() const { return m_property; }
	void setElementProperty(const QList<VisDomProperty*>& a);

	inline QList<VisDomItem*> elementItem() const { return m_item; }
	void setElementItem(const QList<VisDomItem*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	int m_attr_row;
	bool m_has_attr_row;

	int m_attr_column;
	bool m_has_attr_column;

	// child element data
	uint m_children;
	QList<VisDomProperty*> m_property;
	QList<VisDomItem*> m_item;
	enum Child {
		Property = 1,
		Item = 2
	};
};

class VISQTUITOOL_EXPORT VisDomWidget {
	Q_DISABLE_COPY(VisDomWidget)
public:
	VisDomWidget();
	~VisDomWidget();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeClass() const { return m_has_attr_class; }
	inline QString attributeClass() const { return m_attr_class; }
	inline void setAttributeClass(const QString& a) { m_attr_class = a; m_has_attr_class = true; }
	inline void clearAttributeClass() { m_has_attr_class = false; }

	inline bool hasAttributeName() const { return m_has_attr_name; }
	inline QString attributeName() const { return m_attr_name; }
	inline void setAttributeName(const QString& a) { m_attr_name = a; m_has_attr_name = true; }
	inline void clearAttributeName() { m_has_attr_name = false; }

	inline bool hasAttributeNative() const { return m_has_attr_native; }
	inline bool attributeNative() const { return m_attr_native; }
	inline void setAttributeNative(bool a) { m_attr_native = a; m_has_attr_native = true; }
	inline void clearAttributeNative() { m_has_attr_native = false; }

	// child element accessors
	inline QStringList elementClass() const { return m_class; }
	void setElementClass(const QStringList& a);

	inline QList<VisDomProperty*> elementProperty() const { return m_property; }
	void setElementProperty(const QList<VisDomProperty*>& a);

	inline QList<VisDomScript*> elementScript() const { return m_script; }
	void setElementScript(const QList<VisDomScript*>& a);

	inline QList<VisDomWidgetData*> elementWidgetData() const { return m_widgetData; }
	void setElementWidgetData(const QList<VisDomWidgetData*>& a);

	inline QList<VisDomProperty*> elementAttribute() const { return m_attribute; }
	void setElementAttribute(const QList<VisDomProperty*>& a);

	inline QList<VisDomRow*> elementRow() const { return m_row; }
	void setElementRow(const QList<VisDomRow*>& a);

	inline QList<VisDomColumn*> elementColumn() const { return m_column; }
	void setElementColumn(const QList<VisDomColumn*>& a);

	inline QList<VisDomItem*> elementItem() const { return m_item; }
	void setElementItem(const QList<VisDomItem*>& a);

	inline QList<VisDomLayout*> elementLayout() const { return m_layout; }
	void setElementLayout(const QList<VisDomLayout*>& a);

	inline QList<VisDomWidget*> elementWidget() const { return m_widget; }
	void setElementWidget(const QList<VisDomWidget*>& a);

	inline QList<VisDomAction*> elementAction() const { return m_action; }
	void setElementAction(const QList<VisDomAction*>& a);

	inline QList<VisDomActionGroup*> elementActionGroup() const { return m_actionGroup; }
	void setElementActionGroup(const QList<VisDomActionGroup*>& a);

	inline QList<VisDomActionRef*> elementAddAction() const { return m_addAction; }
	void setElementAddAction(const QList<VisDomActionRef*>& a);

	inline QStringList elementZOrder() const { return m_zOrder; }
	void setElementZOrder(const QStringList& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_class;
	bool m_has_attr_class;

	QString m_attr_name;
	bool m_has_attr_name;

	bool m_attr_native;
	bool m_has_attr_native;

	// child element data
	uint m_children;
	QStringList m_class;
	QList<VisDomProperty*> m_property;
	QList<VisDomScript*> m_script;
	QList<VisDomWidgetData*> m_widgetData;
	QList<VisDomProperty*> m_attribute;
	QList<VisDomRow*> m_row;
	QList<VisDomColumn*> m_column;
	QList<VisDomItem*> m_item;
	QList<VisDomLayout*> m_layout;
	QList<VisDomWidget*> m_widget;
	QList<VisDomAction*> m_action;
	QList<VisDomActionGroup*> m_actionGroup;
	QList<VisDomActionRef*> m_addAction;
	QStringList m_zOrder;
	enum Child {
		Class = 1,
		Property = 2,
		Script = 4,
		WidgetData = 8,
		Attribute = 16,
		Row = 32,
		Column = 64,
		Item = 128,
		Layout = 256,
		Widget = 512,
		Action = 1024,
		ActionGroup = 2048,
		AddAction = 4096,
		ZOrder = 8192
	};
};

class VISQTUITOOL_EXPORT VisDomSpacer {
	Q_DISABLE_COPY(VisDomSpacer)
public:
	VisDomSpacer();
	~VisDomSpacer();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeName() const { return m_has_attr_name; }
	inline QString attributeName() const { return m_attr_name; }
	inline void setAttributeName(const QString& a) { m_attr_name = a; m_has_attr_name = true; }
	inline void clearAttributeName() { m_has_attr_name = false; }

	// child element accessors
	inline QList<VisDomProperty*> elementProperty() const { return m_property; }
	void setElementProperty(const QList<VisDomProperty*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_name;
	bool m_has_attr_name;

	// child element data
	uint m_children;
	QList<VisDomProperty*> m_property;
	enum Child {
		Property = 1
	};
};

class VISQTUITOOL_EXPORT VisDomColor {
	Q_DISABLE_COPY(VisDomColor)
public:
	VisDomColor();
	~VisDomColor();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeAlpha() const { return m_has_attr_alpha; }
	inline int attributeAlpha() const { return m_attr_alpha; }
	inline void setAttributeAlpha(int a) { m_attr_alpha = a; m_has_attr_alpha = true; }
	inline void clearAttributeAlpha() { m_has_attr_alpha = false; }

	// child element accessors
	inline int elementRed() const { return m_red; }
	void setElementRed(int a);
	inline bool hasElementRed() const { return m_children & Red; }
	void clearElementRed();

	inline int elementGreen() const { return m_green; }
	void setElementGreen(int a);
	inline bool hasElementGreen() const { return m_children & Green; }
	void clearElementGreen();

	inline int elementBlue() const { return m_blue; }
	void setElementBlue(int a);
	inline bool hasElementBlue() const { return m_children & Blue; }
	void clearElementBlue();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	int m_attr_alpha;
	bool m_has_attr_alpha;

	// child element data
	uint m_children;
	int m_red;
	int m_green;
	int m_blue;
	enum Child {
		Red = 1,
		Green = 2,
		Blue = 4
	};
};

class VISQTUITOOL_EXPORT VisDomGradientStop {
	Q_DISABLE_COPY(VisDomGradientStop)
public:
	VisDomGradientStop();
	~VisDomGradientStop();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributePosition() const { return m_has_attr_position; }
	inline double attributePosition() const { return m_attr_position; }
	inline void setAttributePosition(double a) { m_attr_position = a; m_has_attr_position = true; }
	inline void clearAttributePosition() { m_has_attr_position = false; }

	// child element accessors
	inline VisDomColor* elementColor() const { return m_color; }
	VisDomColor* takeElementColor();
	void setElementColor(VisDomColor* a);
	inline bool hasElementColor() const { return m_children & Color; }
	void clearElementColor();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	double m_attr_position;
	bool m_has_attr_position;

	// child element data
	uint m_children;
	VisDomColor* m_color;
	enum Child {
		Color = 1
	};
};

class VISQTUITOOL_EXPORT VisDomGradient {
	Q_DISABLE_COPY(VisDomGradient)
public:
	VisDomGradient();
	~VisDomGradient();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeStartX() const { return m_has_attr_startX; }
	inline double attributeStartX() const { return m_attr_startX; }
	inline void setAttributeStartX(double a) { m_attr_startX = a; m_has_attr_startX = true; }
	inline void clearAttributeStartX() { m_has_attr_startX = false; }

	inline bool hasAttributeStartY() const { return m_has_attr_startY; }
	inline double attributeStartY() const { return m_attr_startY; }
	inline void setAttributeStartY(double a) { m_attr_startY = a; m_has_attr_startY = true; }
	inline void clearAttributeStartY() { m_has_attr_startY = false; }

	inline bool hasAttributeEndX() const { return m_has_attr_endX; }
	inline double attributeEndX() const { return m_attr_endX; }
	inline void setAttributeEndX(double a) { m_attr_endX = a; m_has_attr_endX = true; }
	inline void clearAttributeEndX() { m_has_attr_endX = false; }

	inline bool hasAttributeEndY() const { return m_has_attr_endY; }
	inline double attributeEndY() const { return m_attr_endY; }
	inline void setAttributeEndY(double a) { m_attr_endY = a; m_has_attr_endY = true; }
	inline void clearAttributeEndY() { m_has_attr_endY = false; }

	inline bool hasAttributeCentralX() const { return m_has_attr_centralX; }
	inline double attributeCentralX() const { return m_attr_centralX; }
	inline void setAttributeCentralX(double a) { m_attr_centralX = a; m_has_attr_centralX = true; }
	inline void clearAttributeCentralX() { m_has_attr_centralX = false; }

	inline bool hasAttributeCentralY() const { return m_has_attr_centralY; }
	inline double attributeCentralY() const { return m_attr_centralY; }
	inline void setAttributeCentralY(double a) { m_attr_centralY = a; m_has_attr_centralY = true; }
	inline void clearAttributeCentralY() { m_has_attr_centralY = false; }

	inline bool hasAttributeFocalX() const { return m_has_attr_focalX; }
	inline double attributeFocalX() const { return m_attr_focalX; }
	inline void setAttributeFocalX(double a) { m_attr_focalX = a; m_has_attr_focalX = true; }
	inline void clearAttributeFocalX() { m_has_attr_focalX = false; }

	inline bool hasAttributeFocalY() const { return m_has_attr_focalY; }
	inline double attributeFocalY() const { return m_attr_focalY; }
	inline void setAttributeFocalY(double a) { m_attr_focalY = a; m_has_attr_focalY = true; }
	inline void clearAttributeFocalY() { m_has_attr_focalY = false; }

	inline bool hasAttributeRadius() const { return m_has_attr_radius; }
	inline double attributeRadius() const { return m_attr_radius; }
	inline void setAttributeRadius(double a) { m_attr_radius = a; m_has_attr_radius = true; }
	inline void clearAttributeRadius() { m_has_attr_radius = false; }

	inline bool hasAttributeAngle() const { return m_has_attr_angle; }
	inline double attributeAngle() const { return m_attr_angle; }
	inline void setAttributeAngle(double a) { m_attr_angle = a; m_has_attr_angle = true; }
	inline void clearAttributeAngle() { m_has_attr_angle = false; }

	inline bool hasAttributeType() const { return m_has_attr_type; }
	inline QString attributeType() const { return m_attr_type; }
	inline void setAttributeType(const QString& a) { m_attr_type = a; m_has_attr_type = true; }
	inline void clearAttributeType() { m_has_attr_type = false; }

	inline bool hasAttributeSpread() const { return m_has_attr_spread; }
	inline QString attributeSpread() const { return m_attr_spread; }
	inline void setAttributeSpread(const QString& a) { m_attr_spread = a; m_has_attr_spread = true; }
	inline void clearAttributeSpread() { m_has_attr_spread = false; }

	inline bool hasAttributeCoordinateMode() const { return m_has_attr_coordinateMode; }
	inline QString attributeCoordinateMode() const { return m_attr_coordinateMode; }
	inline void setAttributeCoordinateMode(const QString& a) { m_attr_coordinateMode = a; m_has_attr_coordinateMode = true; }
	inline void clearAttributeCoordinateMode() { m_has_attr_coordinateMode = false; }

	// child element accessors
	inline QList<VisDomGradientStop*> elementGradientStop() const { return m_gradientStop; }
	void setElementGradientStop(const QList<VisDomGradientStop*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	double m_attr_startX;
	bool m_has_attr_startX;

	double m_attr_startY;
	bool m_has_attr_startY;

	double m_attr_endX;
	bool m_has_attr_endX;

	double m_attr_endY;
	bool m_has_attr_endY;

	double m_attr_centralX;
	bool m_has_attr_centralX;

	double m_attr_centralY;
	bool m_has_attr_centralY;

	double m_attr_focalX;
	bool m_has_attr_focalX;

	double m_attr_focalY;
	bool m_has_attr_focalY;

	double m_attr_radius;
	bool m_has_attr_radius;

	double m_attr_angle;
	bool m_has_attr_angle;

	QString m_attr_type;
	bool m_has_attr_type;

	QString m_attr_spread;
	bool m_has_attr_spread;

	QString m_attr_coordinateMode;
	bool m_has_attr_coordinateMode;

	// child element data
	uint m_children;
	QList<VisDomGradientStop*> m_gradientStop;
	enum Child {
		GradientStop = 1
	};
};

class VISQTUITOOL_EXPORT VisDomBrush {
	Q_DISABLE_COPY(VisDomBrush)
public:
	VisDomBrush();
	~VisDomBrush();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeBrushStyle() const { return m_has_attr_brushStyle; }
	inline QString attributeBrushStyle() const { return m_attr_brushStyle; }
	inline void setAttributeBrushStyle(const QString& a) { m_attr_brushStyle = a; m_has_attr_brushStyle = true; }
	inline void clearAttributeBrushStyle() { m_has_attr_brushStyle = false; }

	// child element accessors
	enum Kind { Unknown = 0, Color, Texture, Gradient };
	inline Kind kind() const { return m_kind; }

	inline VisDomColor* elementColor() const { return m_color; }
	VisDomColor* takeElementColor();
	void setElementColor(VisDomColor* a);

	inline VisDomProperty* elementTexture() const { return m_texture; }
	VisDomProperty* takeElementTexture();
	void setElementTexture(VisDomProperty* a);

	inline VisDomGradient* elementGradient() const { return m_gradient; }
	VisDomGradient* takeElementGradient();
	void setElementGradient(VisDomGradient* a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_brushStyle;
	bool m_has_attr_brushStyle;

	// child element data
	Kind m_kind;
	VisDomColor* m_color;
	VisDomProperty* m_texture;
	VisDomGradient* m_gradient;
};

class VISQTUITOOL_EXPORT VisDomColorRole {
	Q_DISABLE_COPY(VisDomColorRole)
public:
	VisDomColorRole();
	~VisDomColorRole();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeRole() const { return m_has_attr_role; }
	inline QString attributeRole() const { return m_attr_role; }
	inline void setAttributeRole(const QString& a) { m_attr_role = a; m_has_attr_role = true; }
	inline void clearAttributeRole() { m_has_attr_role = false; }

	// child element accessors
	inline VisDomBrush* elementBrush() const { return m_brush; }
	VisDomBrush* takeElementBrush();
	void setElementBrush(VisDomBrush* a);
	inline bool hasElementBrush() const { return m_children & Brush; }
	void clearElementBrush();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_role;
	bool m_has_attr_role;

	// child element data
	uint m_children;
	VisDomBrush* m_brush;
	enum Child {
		Brush = 1
	};
};

class VISQTUITOOL_EXPORT VisDomColorGroup {
	Q_DISABLE_COPY(VisDomColorGroup)
public:
	VisDomColorGroup();
	~VisDomColorGroup();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline QList<VisDomColorRole*> elementColorRole() const { return m_colorRole; }
	void setElementColorRole(const QList<VisDomColorRole*>& a);

	inline QList<VisDomColor*> elementColor() const { return m_color; }
	void setElementColor(const QList<VisDomColor*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	QList<VisDomColorRole*> m_colorRole;
	QList<VisDomColor*> m_color;
	enum Child {
		ColorRole = 1,
		Color = 2
	};
};

class VISQTUITOOL_EXPORT VisDomPalette {
	Q_DISABLE_COPY(VisDomPalette)
public:
	VisDomPalette();
	~VisDomPalette();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline VisDomColorGroup* elementActive() const { return m_active; }
	VisDomColorGroup* takeElementActive();
	void setElementActive(VisDomColorGroup* a);
	inline bool hasElementActive() const { return m_children & Active; }
	void clearElementActive();

	inline VisDomColorGroup* elementInactive() const { return m_inactive; }
	VisDomColorGroup* takeElementInactive();
	void setElementInactive(VisDomColorGroup* a);
	inline bool hasElementInactive() const { return m_children & Inactive; }
	void clearElementInactive();

	inline VisDomColorGroup* elementDisabled() const { return m_disabled; }
	VisDomColorGroup* takeElementDisabled();
	void setElementDisabled(VisDomColorGroup* a);
	inline bool hasElementDisabled() const { return m_children & Disabled; }
	void clearElementDisabled();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	VisDomColorGroup* m_active;
	VisDomColorGroup* m_inactive;
	VisDomColorGroup* m_disabled;
	enum Child {
		Active = 1,
		Inactive = 2,
		Disabled = 4
	};
};

class VISQTUITOOL_EXPORT VisDomFont {
	Q_DISABLE_COPY(VisDomFont)
public:
	VisDomFont();
	~VisDomFont();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline QString elementFamily() const { return m_family; }
	void setElementFamily(const QString& a);
	inline bool hasElementFamily() const { return m_children & Family; }
	void clearElementFamily();

	inline int elementPointSize() const { return m_pointSize; }
	void setElementPointSize(int a);
	inline bool hasElementPointSize() const { return m_children & PointSize; }
	void clearElementPointSize();

	inline int elementWeight() const { return m_weight; }
	void setElementWeight(int a);
	inline bool hasElementWeight() const { return m_children & Weight; }
	void clearElementWeight();

	inline bool elementItalic() const { return m_italic; }
	void setElementItalic(bool a);
	inline bool hasElementItalic() const { return m_children & Italic; }
	void clearElementItalic();

	inline bool elementBold() const { return m_bold; }
	void setElementBold(bool a);
	inline bool hasElementBold() const { return m_children & Bold; }
	void clearElementBold();

	inline bool elementUnderline() const { return m_underline; }
	void setElementUnderline(bool a);
	inline bool hasElementUnderline() const { return m_children & Underline; }
	void clearElementUnderline();

	inline bool elementStrikeOut() const { return m_strikeOut; }
	void setElementStrikeOut(bool a);
	inline bool hasElementStrikeOut() const { return m_children & StrikeOut; }
	void clearElementStrikeOut();

	inline bool elementAntialiasing() const { return m_antialiasing; }
	void setElementAntialiasing(bool a);
	inline bool hasElementAntialiasing() const { return m_children & Antialiasing; }
	void clearElementAntialiasing();

	inline QString elementStyleStrategy() const { return m_styleStrategy; }
	void setElementStyleStrategy(const QString& a);
	inline bool hasElementStyleStrategy() const { return m_children & StyleStrategy; }
	void clearElementStyleStrategy();

	inline bool elementKerning() const { return m_kerning; }
	void setElementKerning(bool a);
	inline bool hasElementKerning() const { return m_children & Kerning; }
	void clearElementKerning();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	QString m_family;
	int m_pointSize;
	int m_weight;
	bool m_italic;
	bool m_bold;
	bool m_underline;
	bool m_strikeOut;
	bool m_antialiasing;
	QString m_styleStrategy;
	bool m_kerning;
	enum Child {
		Family = 1,
		PointSize = 2,
		Weight = 4,
		Italic = 8,
		Bold = 16,
		Underline = 32,
		StrikeOut = 64,
		Antialiasing = 128,
		StyleStrategy = 256,
		Kerning = 512
	};
};

class VISQTUITOOL_EXPORT VisDomPoint {
	Q_DISABLE_COPY(VisDomPoint)
public:
	VisDomPoint();
	~VisDomPoint();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline int elementX() const { return m_x; }
	void setElementX(int a);
	inline bool hasElementX() const { return m_children & X; }
	void clearElementX();

	inline int elementY() const { return m_y; }
	void setElementY(int a);
	inline bool hasElementY() const { return m_children & Y; }
	void clearElementY();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	int m_x;
	int m_y;
	enum Child {
		X = 1,
		Y = 2
	};
};

class VISQTUITOOL_EXPORT VisDomRect {
	Q_DISABLE_COPY(VisDomRect)
public:
	VisDomRect();
	~VisDomRect();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline int elementX() const { return m_x; }
	void setElementX(int a);
	inline bool hasElementX() const { return m_children & X; }
	void clearElementX();

	inline int elementY() const { return m_y; }
	void setElementY(int a);
	inline bool hasElementY() const { return m_children & Y; }
	void clearElementY();

	inline int elementWidth() const { return m_width; }
	void setElementWidth(int a);
	inline bool hasElementWidth() const { return m_children & Width; }
	void clearElementWidth();

	inline int elementHeight() const { return m_height; }
	void setElementHeight(int a);
	inline bool hasElementHeight() const { return m_children & Height; }
	void clearElementHeight();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	int m_x;
	int m_y;
	int m_width;
	int m_height;
	enum Child {
		X = 1,
		Y = 2,
		Width = 4,
		Height = 8
	};
};

class VISQTUITOOL_EXPORT VisDomLocale {
	Q_DISABLE_COPY(VisDomLocale)
public:
	VisDomLocale();
	~VisDomLocale();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeLanguage() const { return m_has_attr_language; }
	inline QString attributeLanguage() const { return m_attr_language; }
	inline void setAttributeLanguage(const QString& a) { m_attr_language = a; m_has_attr_language = true; }
	inline void clearAttributeLanguage() { m_has_attr_language = false; }

	inline bool hasAttributeCountry() const { return m_has_attr_country; }
	inline QString attributeCountry() const { return m_attr_country; }
	inline void setAttributeCountry(const QString& a) { m_attr_country = a; m_has_attr_country = true; }
	inline void clearAttributeCountry() { m_has_attr_country = false; }

	// child element accessors
private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_language;
	bool m_has_attr_language;

	QString m_attr_country;
	bool m_has_attr_country;

	// child element data
	uint m_children;
};

class VISQTUITOOL_EXPORT VisDomSizePolicy {
	Q_DISABLE_COPY(VisDomSizePolicy)
public:
	VisDomSizePolicy();
	~VisDomSizePolicy();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeHSizeType() const { return m_has_attr_hSizeType; }
	inline QString attributeHSizeType() const { return m_attr_hSizeType; }
	inline void setAttributeHSizeType(const QString& a) { m_attr_hSizeType = a; m_has_attr_hSizeType = true; }
	inline void clearAttributeHSizeType() { m_has_attr_hSizeType = false; }

	inline bool hasAttributeVSizeType() const { return m_has_attr_vSizeType; }
	inline QString attributeVSizeType() const { return m_attr_vSizeType; }
	inline void setAttributeVSizeType(const QString& a) { m_attr_vSizeType = a; m_has_attr_vSizeType = true; }
	inline void clearAttributeVSizeType() { m_has_attr_vSizeType = false; }

	// child element accessors
	inline int elementHSizeType() const { return m_hSizeType; }
	void setElementHSizeType(int a);
	inline bool hasElementHSizeType() const { return m_children & HSizeType; }
	void clearElementHSizeType();

	inline int elementVSizeType() const { return m_vSizeType; }
	void setElementVSizeType(int a);
	inline bool hasElementVSizeType() const { return m_children & VSizeType; }
	void clearElementVSizeType();

	inline int elementHorStretch() const { return m_horStretch; }
	void setElementHorStretch(int a);
	inline bool hasElementHorStretch() const { return m_children & HorStretch; }
	void clearElementHorStretch();

	inline int elementVerStretch() const { return m_verStretch; }
	void setElementVerStretch(int a);
	inline bool hasElementVerStretch() const { return m_children & VerStretch; }
	void clearElementVerStretch();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_hSizeType;
	bool m_has_attr_hSizeType;

	QString m_attr_vSizeType;
	bool m_has_attr_vSizeType;

	// child element data
	uint m_children;
	int m_hSizeType;
	int m_vSizeType;
	int m_horStretch;
	int m_verStretch;
	enum Child {
		HSizeType = 1,
		VSizeType = 2,
		HorStretch = 4,
		VerStretch = 8
	};
};

class VISQTUITOOL_EXPORT VisDomSize {
	Q_DISABLE_COPY(VisDomSize)
public:
	VisDomSize();
	~VisDomSize();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline int elementWidth() const { return m_width; }
	void setElementWidth(int a);
	inline bool hasElementWidth() const { return m_children & Width; }
	void clearElementWidth();

	inline int elementHeight() const { return m_height; }
	void setElementHeight(int a);
	inline bool hasElementHeight() const { return m_children & Height; }
	void clearElementHeight();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	int m_width;
	int m_height;
	enum Child {
		Width = 1,
		Height = 2
	};
};

class VISQTUITOOL_EXPORT VisDomDate {
	Q_DISABLE_COPY(VisDomDate)
public:
	VisDomDate();
	~VisDomDate();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline int elementYear() const { return m_year; }
	void setElementYear(int a);
	inline bool hasElementYear() const { return m_children & Year; }
	void clearElementYear();

	inline int elementMonth() const { return m_month; }
	void setElementMonth(int a);
	inline bool hasElementMonth() const { return m_children & Month; }
	void clearElementMonth();

	inline int elementDay() const { return m_day; }
	void setElementDay(int a);
	inline bool hasElementDay() const { return m_children & Day; }
	void clearElementDay();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	int m_year;
	int m_month;
	int m_day;
	enum Child {
		Year = 1,
		Month = 2,
		Day = 4
	};
};

class VISQTUITOOL_EXPORT VisDomTime {
	Q_DISABLE_COPY(VisDomTime)
public:
	VisDomTime();
	~VisDomTime();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline int elementHour() const { return m_hour; }
	void setElementHour(int a);
	inline bool hasElementHour() const { return m_children & Hour; }
	void clearElementHour();

	inline int elementMinute() const { return m_minute; }
	void setElementMinute(int a);
	inline bool hasElementMinute() const { return m_children & Minute; }
	void clearElementMinute();

	inline int elementSecond() const { return m_second; }
	void setElementSecond(int a);
	inline bool hasElementSecond() const { return m_children & Second; }
	void clearElementSecond();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	int m_hour;
	int m_minute;
	int m_second;
	enum Child {
		Hour = 1,
		Minute = 2,
		Second = 4
	};
};

class VISQTUITOOL_EXPORT VisDomDateTime {
	Q_DISABLE_COPY(VisDomDateTime)
public:
	VisDomDateTime();
	~VisDomDateTime();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline int elementHour() const { return m_hour; }
	void setElementHour(int a);
	inline bool hasElementHour() const { return m_children & Hour; }
	void clearElementHour();

	inline int elementMinute() const { return m_minute; }
	void setElementMinute(int a);
	inline bool hasElementMinute() const { return m_children & Minute; }
	void clearElementMinute();

	inline int elementSecond() const { return m_second; }
	void setElementSecond(int a);
	inline bool hasElementSecond() const { return m_children & Second; }
	void clearElementSecond();

	inline int elementYear() const { return m_year; }
	void setElementYear(int a);
	inline bool hasElementYear() const { return m_children & Year; }
	void clearElementYear();

	inline int elementMonth() const { return m_month; }
	void setElementMonth(int a);
	inline bool hasElementMonth() const { return m_children & Month; }
	void clearElementMonth();

	inline int elementDay() const { return m_day; }
	void setElementDay(int a);
	inline bool hasElementDay() const { return m_children & Day; }
	void clearElementDay();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	int m_hour;
	int m_minute;
	int m_second;
	int m_year;
	int m_month;
	int m_day;
	enum Child {
		Hour = 1,
		Minute = 2,
		Second = 4,
		Year = 8,
		Month = 16,
		Day = 32
	};
};

class VISQTUITOOL_EXPORT VisDomStringList {
	Q_DISABLE_COPY(VisDomStringList)
public:
	VisDomStringList();
	~VisDomStringList();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeNotr() const { return m_has_attr_notr; }
	inline QString attributeNotr() const { return m_attr_notr; }
	inline void setAttributeNotr(const QString& a) { m_attr_notr = a; m_has_attr_notr = true; }
	inline void clearAttributeNotr() { m_has_attr_notr = false; }

	inline bool hasAttributeComment() const { return m_has_attr_comment; }
	inline QString attributeComment() const { return m_attr_comment; }
	inline void setAttributeComment(const QString& a) { m_attr_comment = a; m_has_attr_comment = true; }
	inline void clearAttributeComment() { m_has_attr_comment = false; }

	inline bool hasAttributeExtraComment() const { return m_has_attr_extraComment; }
	inline QString attributeExtraComment() const { return m_attr_extraComment; }
	inline void setAttributeExtraComment(const QString& a) { m_attr_extraComment = a; m_has_attr_extraComment = true; }
	inline void clearAttributeExtraComment() { m_has_attr_extraComment = false; }

	// child element accessors
	inline QStringList elementString() const { return m_string; }
	void setElementString(const QStringList& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_notr;
	bool m_has_attr_notr;

	QString m_attr_comment;
	bool m_has_attr_comment;

	QString m_attr_extraComment;
	bool m_has_attr_extraComment;

	// child element data
	uint m_children;
	QStringList m_string;
	enum Child {
		String = 1
	};
};

class VISQTUITOOL_EXPORT VisDomResourcePixmap {
	Q_DISABLE_COPY(VisDomResourcePixmap)
public:
	VisDomResourcePixmap();
	~VisDomResourcePixmap();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeResource() const { return m_has_attr_resource; }
	inline QString attributeResource() const { return m_attr_resource; }
	inline void setAttributeResource(const QString& a) { m_attr_resource = a; m_has_attr_resource = true; }
	inline void clearAttributeResource() { m_has_attr_resource = false; }

	inline bool hasAttributeAlias() const { return m_has_attr_alias; }
	inline QString attributeAlias() const { return m_attr_alias; }
	inline void setAttributeAlias(const QString& a) { m_attr_alias = a; m_has_attr_alias = true; }
	inline void clearAttributeAlias() { m_has_attr_alias = false; }

	// child element accessors
private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_resource;
	bool m_has_attr_resource;

	QString m_attr_alias;
	bool m_has_attr_alias;

	// child element data
	uint m_children;
};

class VISQTUITOOL_EXPORT VisDomResourceIcon {
	Q_DISABLE_COPY(VisDomResourceIcon)
public:
	VisDomResourceIcon();
	~VisDomResourceIcon();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeTheme() const { return m_has_attr_theme; }
	inline QString attributeTheme() const { return m_attr_theme; }
	inline void setAttributeTheme(const QString& a) { m_attr_theme = a; m_has_attr_theme = true; }
	inline void clearAttributeTheme() { m_has_attr_theme = false; }

	inline bool hasAttributeResource() const { return m_has_attr_resource; }
	inline QString attributeResource() const { return m_attr_resource; }
	inline void setAttributeResource(const QString& a) { m_attr_resource = a; m_has_attr_resource = true; }
	inline void clearAttributeResource() { m_has_attr_resource = false; }

	// child element accessors
	inline VisDomResourcePixmap* elementNormalOff() const { return m_normalOff; }
	VisDomResourcePixmap* takeElementNormalOff();
	void setElementNormalOff(VisDomResourcePixmap* a);
	inline bool hasElementNormalOff() const { return m_children & NormalOff; }
	void clearElementNormalOff();

	inline VisDomResourcePixmap* elementNormalOn() const { return m_normalOn; }
	VisDomResourcePixmap* takeElementNormalOn();
	void setElementNormalOn(VisDomResourcePixmap* a);
	inline bool hasElementNormalOn() const { return m_children & NormalOn; }
	void clearElementNormalOn();

	inline VisDomResourcePixmap* elementDisabledOff() const { return m_disabledOff; }
	VisDomResourcePixmap* takeElementDisabledOff();
	void setElementDisabledOff(VisDomResourcePixmap* a);
	inline bool hasElementDisabledOff() const { return m_children & DisabledOff; }
	void clearElementDisabledOff();

	inline VisDomResourcePixmap* elementDisabledOn() const { return m_disabledOn; }
	VisDomResourcePixmap* takeElementDisabledOn();
	void setElementDisabledOn(VisDomResourcePixmap* a);
	inline bool hasElementDisabledOn() const { return m_children & DisabledOn; }
	void clearElementDisabledOn();

	inline VisDomResourcePixmap* elementActiveOff() const { return m_activeOff; }
	VisDomResourcePixmap* takeElementActiveOff();
	void setElementActiveOff(VisDomResourcePixmap* a);
	inline bool hasElementActiveOff() const { return m_children & ActiveOff; }
	void clearElementActiveOff();

	inline VisDomResourcePixmap* elementActiveOn() const { return m_activeOn; }
	VisDomResourcePixmap* takeElementActiveOn();
	void setElementActiveOn(VisDomResourcePixmap* a);
	inline bool hasElementActiveOn() const { return m_children & ActiveOn; }
	void clearElementActiveOn();

	inline VisDomResourcePixmap* elementSelectedOff() const { return m_selectedOff; }
	VisDomResourcePixmap* takeElementSelectedOff();
	void setElementSelectedOff(VisDomResourcePixmap* a);
	inline bool hasElementSelectedOff() const { return m_children & SelectedOff; }
	void clearElementSelectedOff();

	inline VisDomResourcePixmap* elementSelectedOn() const { return m_selectedOn; }
	VisDomResourcePixmap* takeElementSelectedOn();
	void setElementSelectedOn(VisDomResourcePixmap* a);
	inline bool hasElementSelectedOn() const { return m_children & SelectedOn; }
	void clearElementSelectedOn();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_theme;
	bool m_has_attr_theme;

	QString m_attr_resource;
	bool m_has_attr_resource;

	// child element data
	uint m_children;
	VisDomResourcePixmap* m_normalOff;
	VisDomResourcePixmap* m_normalOn;
	VisDomResourcePixmap* m_disabledOff;
	VisDomResourcePixmap* m_disabledOn;
	VisDomResourcePixmap* m_activeOff;
	VisDomResourcePixmap* m_activeOn;
	VisDomResourcePixmap* m_selectedOff;
	VisDomResourcePixmap* m_selectedOn;
	enum Child {
		NormalOff = 1,
		NormalOn = 2,
		DisabledOff = 4,
		DisabledOn = 8,
		ActiveOff = 16,
		ActiveOn = 32,
		SelectedOff = 64,
		SelectedOn = 128
	};
};

class VISQTUITOOL_EXPORT VisDomString {
	Q_DISABLE_COPY(VisDomString)
public:
	VisDomString();
	~VisDomString();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeNotr() const { return m_has_attr_notr; }
	inline QString attributeNotr() const { return m_attr_notr; }
	inline void setAttributeNotr(const QString& a) { m_attr_notr = a; m_has_attr_notr = true; }
	inline void clearAttributeNotr() { m_has_attr_notr = false; }

	inline bool hasAttributeComment() const { return m_has_attr_comment; }
	inline QString attributeComment() const { return m_attr_comment; }
	inline void setAttributeComment(const QString& a) { m_attr_comment = a; m_has_attr_comment = true; }
	inline void clearAttributeComment() { m_has_attr_comment = false; }

	inline bool hasAttributeExtraComment() const { return m_has_attr_extraComment; }
	inline QString attributeExtraComment() const { return m_attr_extraComment; }
	inline void setAttributeExtraComment(const QString& a) { m_attr_extraComment = a; m_has_attr_extraComment = true; }
	inline void clearAttributeExtraComment() { m_has_attr_extraComment = false; }

	// child element accessors
private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_notr;
	bool m_has_attr_notr;

	QString m_attr_comment;
	bool m_has_attr_comment;

	QString m_attr_extraComment;
	bool m_has_attr_extraComment;

	// child element data
	uint m_children;
};

class VISQTUITOOL_EXPORT VisDomPointF {
	Q_DISABLE_COPY(VisDomPointF)
public:
	VisDomPointF();
	~VisDomPointF();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline double elementX() const { return m_x; }
	void setElementX(double a);
	inline bool hasElementX() const { return m_children & X; }
	void clearElementX();

	inline double elementY() const { return m_y; }
	void setElementY(double a);
	inline bool hasElementY() const { return m_children & Y; }
	void clearElementY();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	double m_x;
	double m_y;
	enum Child {
		X = 1,
		Y = 2
	};
};

class VISQTUITOOL_EXPORT VisDomRectF {
	Q_DISABLE_COPY(VisDomRectF)
public:
	VisDomRectF();
	~VisDomRectF();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline double elementX() const { return m_x; }
	void setElementX(double a);
	inline bool hasElementX() const { return m_children & X; }
	void clearElementX();

	inline double elementY() const { return m_y; }
	void setElementY(double a);
	inline bool hasElementY() const { return m_children & Y; }
	void clearElementY();

	inline double elementWidth() const { return m_width; }
	void setElementWidth(double a);
	inline bool hasElementWidth() const { return m_children & Width; }
	void clearElementWidth();

	inline double elementHeight() const { return m_height; }
	void setElementHeight(double a);
	inline bool hasElementHeight() const { return m_children & Height; }
	void clearElementHeight();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	double m_x;
	double m_y;
	double m_width;
	double m_height;
	enum Child {
		X = 1,
		Y = 2,
		Width = 4,
		Height = 8
	};
};

class VISQTUITOOL_EXPORT VisDomSizeF {
	Q_DISABLE_COPY(VisDomSizeF)
public:
	VisDomSizeF();
	~VisDomSizeF();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline double elementWidth() const { return m_width; }
	void setElementWidth(double a);
	inline bool hasElementWidth() const { return m_children & Width; }
	void clearElementWidth();

	inline double elementHeight() const { return m_height; }
	void setElementHeight(double a);
	inline bool hasElementHeight() const { return m_children & Height; }
	void clearElementHeight();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	double m_width;
	double m_height;
	enum Child {
		Width = 1,
		Height = 2
	};
};

class VISQTUITOOL_EXPORT VisDomChar {
	Q_DISABLE_COPY(VisDomChar)
public:
	VisDomChar();
	~VisDomChar();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline int elementUnicode() const { return m_unicode; }
	void setElementUnicode(int a);
	inline bool hasElementUnicode() const { return m_children & Unicode; }
	void clearElementUnicode();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	int m_unicode;
	enum Child {
		Unicode = 1
	};
};

class VISQTUITOOL_EXPORT VisDomUrl {
	Q_DISABLE_COPY(VisDomUrl)
public:
	VisDomUrl();
	~VisDomUrl();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline VisDomString* elementString() const { return m_string; }
	VisDomString* takeElementString();
	void setElementString(VisDomString* a);
	inline bool hasElementString() const { return m_children & String; }
	void clearElementString();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	VisDomString* m_string;
	enum Child {
		String = 1
	};
};

class VISQTUITOOL_EXPORT VisDomProperty {
	Q_DISABLE_COPY(VisDomProperty)
public:
	VisDomProperty();
	~VisDomProperty();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeName() const { return m_has_attr_name; }
	inline QString attributeName() const { return m_attr_name; }
	inline void setAttributeName(const QString& a) { m_attr_name = a; m_has_attr_name = true; }
	inline void clearAttributeName() { m_has_attr_name = false; }

	inline bool hasAttributeStdset() const { return m_has_attr_stdset; }
	inline int attributeStdset() const { return m_attr_stdset; }
	inline void setAttributeStdset(int a) { m_attr_stdset = a; m_has_attr_stdset = true; }
	inline void clearAttributeStdset() { m_has_attr_stdset = false; }

	// child element accessors
	enum Kind { Unknown = 0, Bool, Color, Cstring, Cursor, CursorShape, Enum, Font, IconSet, Pixmap, Palette, Point, Rect, Set, Locale, SizePolicy, Size, String, StringList, Number, Float, Double, Date, Time, DateTime, PointF, RectF, SizeF, LongLong, Char, Url, UInt, ULongLong, Brush };
	inline Kind kind() const { return m_kind; }

	inline QString elementBool() const { return m_bool; }
	void setElementBool(const QString& a);

	inline VisDomColor* elementColor() const { return m_color; }
	VisDomColor* takeElementColor();
	void setElementColor(VisDomColor* a);

	inline QString elementCstring() const { return m_cstring; }
	void setElementCstring(const QString& a);

	inline int elementCursor() const { return m_cursor; }
	void setElementCursor(int a);

	inline QString elementCursorShape() const { return m_cursorShape; }
	void setElementCursorShape(const QString& a);

	inline QString elementEnum() const { return m_enum; }
	void setElementEnum(const QString& a);

	inline VisDomFont* elementFont() const { return m_font; }
	VisDomFont* takeElementFont();
	void setElementFont(VisDomFont* a);

	inline VisDomResourceIcon* elementIconSet() const { return m_iconSet; }
	VisDomResourceIcon* takeElementIconSet();
	void setElementIconSet(VisDomResourceIcon* a);

	inline VisDomResourcePixmap* elementPixmap() const { return m_pixmap; }
	VisDomResourcePixmap* takeElementPixmap();
	void setElementPixmap(VisDomResourcePixmap* a);

	inline VisDomPalette* elementPalette() const { return m_palette; }
	VisDomPalette* takeElementPalette();
	void setElementPalette(VisDomPalette* a);

	inline VisDomPoint* elementPoint() const { return m_point; }
	VisDomPoint* takeElementPoint();
	void setElementPoint(VisDomPoint* a);

	inline VisDomRect* elementRect() const { return m_rect; }
	VisDomRect* takeElementRect();
	void setElementRect(VisDomRect* a);

	inline QString elementSet() const { return m_set; }
	void setElementSet(const QString& a);

	inline VisDomLocale* elementLocale() const { return m_locale; }
	VisDomLocale* takeElementLocale();
	void setElementLocale(VisDomLocale* a);

	inline VisDomSizePolicy* elementSizePolicy() const { return m_sizePolicy; }
	VisDomSizePolicy* takeElementSizePolicy();
	void setElementSizePolicy(VisDomSizePolicy* a);

	inline VisDomSize* elementSize() const { return m_size; }
	VisDomSize* takeElementSize();
	void setElementSize(VisDomSize* a);

	inline VisDomString* elementString() const { return m_string; }
	VisDomString* takeElementString();
	void setElementString(VisDomString* a);

	inline VisDomStringList* elementStringList() const { return m_stringList; }
	VisDomStringList* takeElementStringList();
	void setElementStringList(VisDomStringList* a);

	inline int elementNumber() const { return m_number; }
	void setElementNumber(int a);

	inline float elementFloat() const { return m_float; }
	void setElementFloat(float a);

	inline double elementDouble() const { return m_double; }
	void setElementDouble(double a);

	inline VisDomDate* elementDate() const { return m_date; }
	VisDomDate* takeElementDate();
	void setElementDate(VisDomDate* a);

	inline VisDomTime* elementTime() const { return m_time; }
	VisDomTime* takeElementTime();
	void setElementTime(VisDomTime* a);

	inline VisDomDateTime* elementDateTime() const { return m_dateTime; }
	VisDomDateTime* takeElementDateTime();
	void setElementDateTime(VisDomDateTime* a);

	inline VisDomPointF* elementPointF() const { return m_pointF; }
	VisDomPointF* takeElementPointF();
	void setElementPointF(VisDomPointF* a);

	inline VisDomRectF* elementRectF() const { return m_rectF; }
	VisDomRectF* takeElementRectF();
	void setElementRectF(VisDomRectF* a);

	inline VisDomSizeF* elementSizeF() const { return m_sizeF; }
	VisDomSizeF* takeElementSizeF();
	void setElementSizeF(VisDomSizeF* a);

	inline qlonglong elementLongLong() const { return m_longLong; }
	void setElementLongLong(qlonglong a);

	inline VisDomChar* elementChar() const { return m_char; }
	VisDomChar* takeElementChar();
	void setElementChar(VisDomChar* a);

	inline VisDomUrl* elementUrl() const { return m_url; }
	VisDomUrl* takeElementUrl();
	void setElementUrl(VisDomUrl* a);

	inline uint elementUInt() const { return m_UInt; }
	void setElementUInt(uint a);

	inline qulonglong elementULongLong() const { return m_uLongLong; }
	void setElementULongLong(qulonglong a);

	inline VisDomBrush* elementBrush() const { return m_brush; }
	VisDomBrush* takeElementBrush();
	void setElementBrush(VisDomBrush* a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_name;
	bool m_has_attr_name;

	int m_attr_stdset;
	bool m_has_attr_stdset;

	// child element data
	Kind m_kind;
	QString m_bool;
	VisDomColor* m_color;
	QString m_cstring;
	int m_cursor;
	QString m_cursorShape;
	QString m_enum;
	VisDomFont* m_font;
	VisDomResourceIcon* m_iconSet;
	VisDomResourcePixmap* m_pixmap;
	VisDomPalette* m_palette;
	VisDomPoint* m_point;
	VisDomRect* m_rect;
	QString m_set;
	VisDomLocale* m_locale;
	VisDomSizePolicy* m_sizePolicy;
	VisDomSize* m_size;
	VisDomString* m_string;
	VisDomStringList* m_stringList;
	int m_number;
	float m_float;
	double m_double;
	VisDomDate* m_date;
	VisDomTime* m_time;
	VisDomDateTime* m_dateTime;
	VisDomPointF* m_pointF;
	VisDomRectF* m_rectF;
	VisDomSizeF* m_sizeF;
	qlonglong m_longLong;
	VisDomChar* m_char;
	VisDomUrl* m_url;
	uint m_UInt;
	qulonglong m_uLongLong;
	VisDomBrush* m_brush;
};

class VISQTUITOOL_EXPORT VisDomConnections {
	Q_DISABLE_COPY(VisDomConnections)
public:
	VisDomConnections();
	~VisDomConnections();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline QList<VisDomConnection*> elementConnection() const { return m_connection; }
	void setElementConnection(const QList<VisDomConnection*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	QList<VisDomConnection*> m_connection;
	enum Child {
		Connection = 1
	};
};

class VISQTUITOOL_EXPORT VisDomConnection {
	Q_DISABLE_COPY(VisDomConnection)
public:
	VisDomConnection();
	~VisDomConnection();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline QString elementSender() const { return m_sender; }
	void setElementSender(const QString& a);
	inline bool hasElementSender() const { return m_children & Sender; }
	void clearElementSender();

	inline QString elementSignal() const { return m_signal; }
	void setElementSignal(const QString& a);
	inline bool hasElementSignal() const { return m_children & Signal; }
	void clearElementSignal();

	inline QString elementReceiver() const { return m_receiver; }
	void setElementReceiver(const QString& a);
	inline bool hasElementReceiver() const { return m_children & Receiver; }
	void clearElementReceiver();

	inline QString elementSlot() const { return m_slot; }
	void setElementSlot(const QString& a);
	inline bool hasElementSlot() const { return m_children & Slot; }
	void clearElementSlot();

	inline VisDomConnectionHints* elementHints() const { return m_hints; }
	VisDomConnectionHints* takeElementHints();
	void setElementHints(VisDomConnectionHints* a);
	inline bool hasElementHints() const { return m_children & Hints; }
	void clearElementHints();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	QString m_sender;
	QString m_signal;
	QString m_receiver;
	QString m_slot;
	VisDomConnectionHints* m_hints;
	enum Child {
		Sender = 1,
		Signal = 2,
		Receiver = 4,
		Slot = 8,
		Hints = 16
	};
};

class VISQTUITOOL_EXPORT VisDomConnectionHints {
	Q_DISABLE_COPY(VisDomConnectionHints)
public:
	VisDomConnectionHints();
	~VisDomConnectionHints();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline QList<VisDomConnectionHint*> elementHint() const { return m_hint; }
	void setElementHint(const QList<VisDomConnectionHint*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	QList<VisDomConnectionHint*> m_hint;
	enum Child {
		Hint = 1
	};
};

class VISQTUITOOL_EXPORT VisDomConnectionHint {
	Q_DISABLE_COPY(VisDomConnectionHint)
public:
	VisDomConnectionHint();
	~VisDomConnectionHint();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeType() const { return m_has_attr_type; }
	inline QString attributeType() const { return m_attr_type; }
	inline void setAttributeType(const QString& a) { m_attr_type = a; m_has_attr_type = true; }
	inline void clearAttributeType() { m_has_attr_type = false; }

	// child element accessors
	inline int elementX() const { return m_x; }
	void setElementX(int a);
	inline bool hasElementX() const { return m_children & X; }
	void clearElementX();

	inline int elementY() const { return m_y; }
	void setElementY(int a);
	inline bool hasElementY() const { return m_children & Y; }
	void clearElementY();

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_type;
	bool m_has_attr_type;

	// child element data
	uint m_children;
	int m_x;
	int m_y;
	enum Child {
		X = 1,
		Y = 2
	};
};

class VISQTUITOOL_EXPORT VisDomScript {
	Q_DISABLE_COPY(VisDomScript)
public:
	VisDomScript();
	~VisDomScript();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeSource() const { return m_has_attr_source; }
	inline QString attributeSource() const { return m_attr_source; }
	inline void setAttributeSource(const QString& a) { m_attr_source = a; m_has_attr_source = true; }
	inline void clearAttributeSource() { m_has_attr_source = false; }

	inline bool hasAttributeLanguage() const { return m_has_attr_language; }
	inline QString attributeLanguage() const { return m_attr_language; }
	inline void setAttributeLanguage(const QString& a) { m_attr_language = a; m_has_attr_language = true; }
	inline void clearAttributeLanguage() { m_has_attr_language = false; }

	// child element accessors
private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_source;
	bool m_has_attr_source;

	QString m_attr_language;
	bool m_has_attr_language;

	// child element data
	uint m_children;
};

class VISQTUITOOL_EXPORT VisDomWidgetData {
	Q_DISABLE_COPY(VisDomWidgetData)
public:
	VisDomWidgetData();
	~VisDomWidgetData();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline QList<VisDomProperty*> elementProperty() const { return m_property; }
	void setElementProperty(const QList<VisDomProperty*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	QList<VisDomProperty*> m_property;
	enum Child {
		Property = 1
	};
};

class VISQTUITOOL_EXPORT VisDomDesignerData {
	Q_DISABLE_COPY(VisDomDesignerData)
public:
	VisDomDesignerData();
	~VisDomDesignerData();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline QList<VisDomProperty*> elementProperty() const { return m_property; }
	void setElementProperty(const QList<VisDomProperty*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	QList<VisDomProperty*> m_property;
	enum Child {
		Property = 1
	};
};

class VISQTUITOOL_EXPORT VisDomSlots {
	Q_DISABLE_COPY(VisDomSlots)
public:
	VisDomSlots();
	~VisDomSlots();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline QStringList elementSignal() const { return m_signal; }
	void setElementSignal(const QStringList& a);

	inline QStringList elementSlot() const { return m_slot; }
	void setElementSlot(const QStringList& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	QStringList m_signal;
	QStringList m_slot;
	enum Child {
		Signal = 1,
		Slot = 2
	};
};

class VISQTUITOOL_EXPORT VisDomPropertySpecifications {
	Q_DISABLE_COPY(VisDomPropertySpecifications)
public:
	VisDomPropertySpecifications();
	~VisDomPropertySpecifications();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	// child element accessors
	inline QList<VisDomPropertyToolTip*> elementTooltip() const { return m_tooltip; }
	void setElementTooltip(const QList<VisDomPropertyToolTip*>& a);

	inline QList<VisDomStringPropertySpecification*> elementStringpropertyspecification() const { return m_stringpropertyspecification; }
	void setElementStringpropertyspecification(const QList<VisDomStringPropertySpecification*>& a);

private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	// child element data
	uint m_children;
	QList<VisDomPropertyToolTip*> m_tooltip;
	QList<VisDomStringPropertySpecification*> m_stringpropertyspecification;
	enum Child {
		Tooltip = 1,
		Stringpropertyspecification = 2
	};
};

class VISQTUITOOL_EXPORT VisDomPropertyToolTip {
	Q_DISABLE_COPY(VisDomPropertyToolTip)
public:
	VisDomPropertyToolTip();
	~VisDomPropertyToolTip();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeName() const { return m_has_attr_name; }
	inline QString attributeName() const { return m_attr_name; }
	inline void setAttributeName(const QString& a) { m_attr_name = a; m_has_attr_name = true; }
	inline void clearAttributeName() { m_has_attr_name = false; }

	// child element accessors
private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_name;
	bool m_has_attr_name;

	// child element data
	uint m_children;
};

class VISQTUITOOL_EXPORT VisDomStringPropertySpecification {
	Q_DISABLE_COPY(VisDomStringPropertySpecification)
public:
	VisDomStringPropertySpecification();
	~VisDomStringPropertySpecification();

	void read(QXmlStreamReader &reader);
	void write(QXmlStreamWriter &writer, const QString &tagName = QString()) const;
	inline QString text() const { return m_text; }
	inline void setText(const QString &s) { m_text = s; }

	// attribute accessors
	inline bool hasAttributeName() const { return m_has_attr_name; }
	inline QString attributeName() const { return m_attr_name; }
	inline void setAttributeName(const QString& a) { m_attr_name = a; m_has_attr_name = true; }
	inline void clearAttributeName() { m_has_attr_name = false; }

	inline bool hasAttributeType() const { return m_has_attr_type; }
	inline QString attributeType() const { return m_attr_type; }
	inline void setAttributeType(const QString& a) { m_attr_type = a; m_has_attr_type = true; }
	inline void clearAttributeType() { m_has_attr_type = false; }

	inline bool hasAttributeNotr() const { return m_has_attr_notr; }
	inline QString attributeNotr() const { return m_attr_notr; }
	inline void setAttributeNotr(const QString& a) { m_attr_notr = a; m_has_attr_notr = true; }
	inline void clearAttributeNotr() { m_has_attr_notr = false; }

	// child element accessors
private:
	QString m_text;
	void clear(bool clear_all = true);

	// attribute data
	QString m_attr_name;
	bool m_has_attr_name;

	QString m_attr_type;
	bool m_has_attr_type;

	QString m_attr_notr;
	bool m_has_attr_notr;

	// child element data
	uint m_children;
};

#endif // VISQTUITOOL_H

